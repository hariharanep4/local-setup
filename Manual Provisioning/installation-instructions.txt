0. Vagrant

    Before Provision VMs make sure you've installed vagrant plugins.

    vagrant plugin install vagrant-hostmanager

    Use of this plugin is to make an entry of VMs hostnames into /etc/hosts file so that they can communicate each other.

    Go to the directory where Vagrant file exists

    Use the command below to provision VMs

    vagrant up 

    Use the command below to destroy VMs

    vagrant destroy

    Use the command below to check the status of VMs

    vagrant status


1. MariaDB Setup

    Log into the MariaDB VM using following command

        vagrant ssh mariadb
    
    Verify host entry, if entries are missing update it with IP and hostnames.
        
        cat /etc/hosts

    Set Database password variable 

        DATABASE_PASSWORD='admin123' to make it permanent paste this variable in /etc/profile file.

    Update Package index for latest updates

        sudo yum update -y

    Setup repository

        sudo yum install epel-release -y

    Install Git, MariaDB

        sudo yum install git mariadb-server -y

    Start and Enable MariaDB server

        sudo systemctl start mariadb

        sudo systemctl enable mariadb

    RUN mysql_secure_installation

    

    Download the source code from GitHub.

        git clone -b local-setup https://github.com/devopshydclub/vprofile.git
        cd vprofile

    Set DB name and users.

        sudo mysql -u root -p"$DATABASE_PASSWORD" -e "create database accounts"

        sudo mysql -u root -p"$DATABASE_PASSWORD" -e "grant all privileges on accounts.* to 'admin'@'tomcat' identified by 'admin123'"

        sudo mysql -u root -p"$DATABASE_PASSWORD" -e accounts < src/main/resources/db_backup.sql

        sudo mysql -u root -p"$DATABASE_PASSWORD" -e "flush privileges"


    Restart MariaDB server

        sudo systemctl restart mariadb




    Setup the firewall and allow the MariaDB to access from port number 3306

        sudo systemctl start firewalld

        sudo systemctl enable firewalld

        sudo firewall-cmd --get-active-zones

        sudo firewall-cmd --zone=public --add-port=3306/tcp --permanent

        sudo firewall-cmd --reload

        sudo systemctl restart mariadb


2. Memcached Setup

    Install, Start, Enable Memcached on port 11211

        sudo yum update -y
        
        sudo yum install epel-release -y

        sudo yum install memcached -y

        sudo systemctl start memcached

        sudo systemctl enable memcached

        memcached -p 11211 -U 11111 -u memcached -d


    Setup the firewall and allow the port 11211 to access memcache

        sudo systemctl start firewalld

        sudo systemctl enable firewalld

        sudo firewall-cmd --get-active-zones

        sudo firewall-cmd --zone=public --add-port=11211/tcp --permanent

        sudo firewall-cmd --reload

        memcached -p 11211 -U 11111 -u memcached -d

3. RabbitMQ Setup

    Login to RabbitMQ VM

        vagrant ssh rabbitmq


    Verfiy Hosts entry, if entries missing update it with IP and hostnames

        cat /etc/hosts

    Update OS with latest updates

        sudo yum update -y

    Setup EPEL repository

        sudo yum install epel-release -y
    
    Install dependencies

        sudo yum install socat wget -y

    Create a repo file for Erlang Package.

        wget http://packages.erlang-solutions.com/erlang-solutions-2.0-1.noarch.rpm

        sudo rpm -Uvh erlang-solutions-2.0-1.noarch.rpm

    Install Erlang

        sudo yum install erlang -y

    Install RabbitMQ server

        curl -s https://packagecloud.io/install/repositories/rabbitmq/rabbitmq-server/script.rpm.sh | sudo bash

        sudo yum install rabbitmq-server -y

    Start and Enable RabbitMQ server

        sudo systemctl start rabbitmq-server

        sudo systemctl enable rabbitmq-server

    Config changes

        sudo sh -c 'echo "[{rabbit, [{loopback_users, []}]}]." > /etc/rabbitmq/rabbitmq.config'

        sudo rabbitmqctl add_user test test

        sudo rabbitmqctl set_user_tags test administrator


    Restart RabbitMQ server

        sudo systemctl restart rabbitmq

    
    Setup firewall and allow port 25672 to access the RabbitMQ

        sudo systemctl start firewalld

        sudo systemctl enable firewalld

        sudo firewall-cmd --get-active-zones

        sudo firewall-cmd --zone=public --add-port=25672/tcp --permanent

        sudo firewall-cmd --reload

4. Tomcat Setup

    Login to the tomcat VM
        
        vagrant ssh tomcat

    Verify the host entry, if entries missing update it with IP and hostnames

        cat /etc/hosts
    
    Update OS with latest patches or updates

        sudo yum update -y

    Set EPEL repositories

        sudo yum install epel-release -y

    Install dependencies

        sudo yum install java-1.8.0-openjdk -y

        sudo yum install git maven wget -y

    Download Tomcat package 

        wget https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.37/bin/apache-tomcat-8.5.37.tar.gz

        tar xzvf apache-tomcat-8.5.37.tar.gz

    Add tomcat user

        sudo useradd --home-dir /usr/local/tomcat8 --shell /sbin/nologin tomcat

    Copy data to tomcat directory

        sudo cp -r apache-tomcat-8.5.37/* /usr/local/tomcat8/

        sudo chown -R tomcat.tomcat /usr/local/tomcat8

    Setup systemd for Tomcat

        sudo vim /etc/systemd/system/tomcat.service
        
        [Unit]
        Description=Tomcat
        After=network.target

        [Service]
        User=tomcat
        WorkingDirectory=/usr/local/tomcat8
        Environment=JRE_HOME=/usr/lib/jvm/jre
        Environment=JAVA_HOME=/usr/lib/jvm/jre
        Environment=CATALINA_HOME=/usr/local/tomcat8
        Environment=CATALINE_BASE=/usr/local/tomcat8
        ExecStart=/usr/local/tomcat8/bin/catalina.sh run
        ExecStop=/usr/local/tomcat8/bin/shutdown.sh
        SyslogIdentifier=tomcat-%i
        
        [Install]
        WantedBy=multi-user.target


        sudo systemctl daemon-reload

        sudo systemctl start tomcat

        sudo systemctl enable tomcat

    Enable the firewall and allow port 8080 to access tomcat

        sudo systemctl start firewalld
        
        sudo systemctl enble firewalld

        sudo firewall-cmd --get-active-zones

        sudo firewall-cmd --zone=public --add-port=8080/tcp --permanent

        sudo firewall-cmd --reload

    
    Build and Deploy

        Download source code

            git clone -b local-setup https://github.com/devopshydclub/vprofile-project.git

        Update configuration

            cd vprofile-project

            vim src/main/resources/application.properties

            Update file with backend server details

        Build code

            mvn install

        Deploy artifact

            sudo systemctl stop tomcat

            sleep 120

            sudo rm -rf /usr/local/tomcat8/webapps/ROOT*

            sudo cp target/vprofile-v2.war /usr/local/tomcat8/webapps/ROOT.war

            sudo systemctl start tomcat

            sleep 300

            sudo chown -R tomcat.tomcat /usr/local/tomcat8/webapps/

            sudo systemctl restart tomcat

5. Nginx Setup

    Login to Nginx VM

        vagrant ssh nginx 
    
    Verify hosts entry, if entries missing update it with IP and hostnames

        cat /etc/hosts
    
    Update OS with latest updates

        sudo apt update

        sudo apt upgrade -y

    Install Nginx

        sudo apt install nginx -y 

    Create Nginx config file with below content

        sudo vim /etc/nginx/sites-available/vproapp

        upstream vproapp {
            server tomcat:8080;
        }

        server {
            listen 80;
            
        location / {
            proxy_pass http://vproapp;
        }
        }

    Remove default nginx config

        sudo rm -rf /etc/nginx/sites-enabled/default

    Create link to activate website

        sudo ln -s /etc/nginx/sites-available/vproapp /etc/nginx/sites-enabled/vproapp

    Restart Nginx

        sudo systemctl restart nginx     

